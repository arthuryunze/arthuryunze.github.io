<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ML MXNet on Yunze's blog</title><link>https://arthuryunze.github.io/categories/ml-mxnet/</link><description>Recent content in ML MXNet on Yunze's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://arthuryunze.github.io/categories/ml-mxnet/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://arthuryunze.github.io/posts/2020-02-20-mxnet%E5%AD%A6%E4%B9%A0-%E4%B8%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arthuryunze.github.io/posts/2020-02-20-mxnet%E5%AD%A6%E4%B9%A0-%E4%B8%80/</guid><description>系统环境：
Windows10
python3
MXNet v1.5.1 cpu版本
Anaconda jupyterLab 1.2.6
国际惯例，从mnist数据集开始。
Loading Data——导入mnist手写体数据集 import mxnet as mx # Fixing the random seed mx.random.seed(42) mnist = mx.test_utils.get_mnist() 注意，Windows环境下，运行完成后将在当前目录下载四个.qz格式文件，若下载被中断，则无法运行后续代码。
解决方法：删除不完整的.qz文件从新下载。Linux系统下该文件位置在~/.keras/datasets路径下，使用命令rm -rf &amp;quot;dataset name&amp;quot;删除。
# 训练批次 batch_size = 100 # 初始化两个迭代器，一个用于训练数据，另一个用于测试数据。 train_data = mx.io.NDArrayIter(mnist[&amp;#39;train_data&amp;#39;], mnist[&amp;#39;train_label&amp;#39;], batch_size, shuffle=True) val_data = mx.io.NDArrayIter(mnist[&amp;#39;test_data&amp;#39;], mnist[&amp;#39;test_label&amp;#39;], batch_size) MXNet Data iterators： MXNet数据迭代器
对于大批量数据，不可能预加载整个数据集，MXNet Data iterators可将输入数据流式传输到MXNet训练算法中。
一个批次的图像通常表示为一个4维数组(batch_size, num_channels, width, height)
Approaches——方法(CNN) CNN主要由两种网络层构成：
卷积层和池化层
卷积层 单个卷积层由一个或多个过滤器组成，每个过滤器起*特征检测器(feature detector)*的作用。
在训练过程中，CNN学习这些过滤器的适当表示形式(参数)。
CNN通过应用非线性函数对卷积层的输出进行转换(transform)。
池化层 A pooling layer serves to make the CNN translation invariant</description></item><item><title/><link>https://arthuryunze.github.io/posts/2020-02-21-mxnet%E5%AD%A6%E4%B9%A0-%E4%BA%8C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arthuryunze.github.io/posts/2020-02-21-mxnet%E5%AD%A6%E4%B9%A0-%E4%BA%8C/</guid><description>在上一节，我们已经搭好了LeNet。
现在，我们要开始使用数据训练这个网络，以使它找到合适的参数。
我们将使用超参数训练LeNet。
若使用GPU进行运算，我们只需要将mx.cpu()更改为mx.gpu()，而MXNet会处理其余的工作。我们将在10个时间段(epoch)后停止训练。
建议使用GPU进行运算，LeNet比MLP(多层感知机)更复杂，计算量更大。GPU可大大加快计算速度。
为了方便，我的环境使用了CPU版本的MXNet。速度会稍慢，但不影响后续代码。
注意CPU版本和GPU版本安装时是不同的，安装步骤可以查看MXNet官网。
Initialize parameters and optimizer——初始化参数和优化器 初始化网络参数如下：
# set the context on GPU is available otherwise CPU ctx = [mx.gpu() if mx.test_utils.list_gpus() else mx.cpu()] net.initialize(mx.init.Xavier(magnitude=2.24), ctx=ctx) trainer = gluon.Trainer(net.collect_params(), &amp;#39;sgd&amp;#39;, {&amp;#39;learning_rate&amp;#39;: 0.03}) Training——训练 # Use Accuracy as the evaluation metric. metric = mx.metric.Accuracy() softmax_cross_entropy_loss = gluon.loss.SoftmaxCrossEntropyLoss() for i in range(epoch): # Reset the train data iterator. train_data.reset() # Loop over the train data iterator. for batch in train_data: # Splits train data into multiple slices along batch_axis # and copy each slice into a context.</description></item><item><title/><link>https://arthuryunze.github.io/posts/2020-02-23-face-detectionmtcnn-%E5%AD%A6%E4%B9%A0-%E4%B8%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://arthuryunze.github.io/posts/2020-02-23-face-detectionmtcnn-%E5%AD%A6%E4%B9%A0-%E4%B8%80/</guid><description>Face Detection 人脸检测 对于人类而言，这是一个微不足道的问题，近来也已经被经典的基于特征的技术（例如级联分类器）合理地解决了。最近，深度学习方法已在标准的基准人脸检测数据集上取得了最先进的结果。一个例子是多任务级联卷积神经网络(Multi-task Cascade Convolutional Neural Network)，简称MTCNN。
MTCNN网络结构 该网络使用具有三个网络的级联结构。 首先将图像缩放到不同大小的范围（称为图像金字塔），然后第一个模型（建议网络或P-Net）提出候选的面部区域，第二个模型（Refine网络或R-Net）过滤边界框 ，第三个模型（输出网络或O-Net）提出了人脸标志。
第一个网络是一个浅层神经网络（后简称pnet） =&amp;gt; 产生初步候选框 第二个网络是一个“more complex CNN“相较pnet更为复杂的网络（后简称rnet）=&amp;gt; 从初步候选框中筛选掉大量的不包括人脸的框
第三个网络是一个“more powerful CNN”相较rnet更为强大的网络（后简称onet）=&amp;gt; 进一步优化结果以及产生五个面部特征点（双眼，鼻尖，嘴角）
mtcnn库 GitHub上发现，已经有同学做好了MTCNN相应的库
ipazc/mtcnn: MTCNN face detection implementation for TensorFlow, as a PIP package.
我们先简单使用一下：
用笔记本自带摄像头拍摄一张照片，用opencv库导入。
from mtcnn import MTCNN import cv2 img = cv2.cvtColor(cv2.imread(&amp;#34;WIN_20200223_17_44_49_Pro.jpg&amp;#34;), cv2.COLOR_BGR2RGB) detector = MTCNN() detector.detect_faces(img) 我们可以得到一个list格式的数据
[{&amp;#39;box&amp;#39;: [480, 214, 234, 309], &amp;#39;confidence&amp;#39;: 0.9999535083770752, &amp;#39;keypoints&amp;#39;: {&amp;#39;left_eye&amp;#39;: (536, 330), &amp;#39;right_eye&amp;#39;: (643, 334), &amp;#39;nose&amp;#39;: (583, 402), &amp;#39;mouth_left&amp;#39;: (543, 453), &amp;#39;mouth_right&amp;#39;: (633, 456)}}] 从这个list可以看出</description></item></channel></rss>